14.	Learn to deploy Android applications

1.	Open Android Studio: Launch Android Studio on your computer.
2.	Open Your Project: Open the Android project for which you want to generate the signed APK.
3.	Build Menu: Click on the "Build" menu at the top of the screen.
4.	Generate Signed Bundle / APK: From the "Build" menu, select "Generate Signed Bundle / APK..." option.
5.	Select APK: In the dialog that appears, choose "APK" and click "Next".
6.	Key Store Creation: If you haven't already created a keystore, you'll need to do so. Click on "Create new..." and follow the prompts. Remember to remember the details you use here as you'll need them for future updates.
7.	Fill in Key Store Information: Fill in the required fields in the "New Key Store" dialog: Key store path, Password, Alias, Password for key, Validity (years), First and Last name, Organization, City or locality, and State or province.
8.	Build Types: Choose the build type (debug or release) and configure it accordingly. For a release build, ensure that "Signature Versions" is set to "V1 (Jar Signature)" or "V1 (Jar Signature) and V2 (Full APK Signature)".
9.	Destination Folder: Choose where you want to save the signed APK and click "Next".
10.	Build: Review the build settings and click on "Finish" to start the process of building the signed APK.
11.	Wait: Android Studio will take some time to compile and sign the APK.
12.	Confirmation: Once the process is complete, you'll receive a confirmation message along with the location of the signed APK.
13.	Locate APK: Navigate to the location where the signed APK is saved.
14.	Distribution: You can now distribute the signed APK to users or upload it to the Google Play Store if you're publishing your app.
Note: Remember to keep your keystore file and passwords secure, as they are needed for future updates to your app.

1. activity_main.xml:
	xml version="1.0" encoding="utf-8"?>
	<androidx.constraintlayout.widget.ConstraintLayout 	xmlns:android="http://schemas.android.com/apk/res/android"
    	xmlns:app="http://schemas.android.com/apk/res-auto"
    	xmlns:tools="http://schemas.android.com/tools"
    	android:id="@+id/main"
    	android:layout_width="match_parent"
   	 android:layout_height="match_parent"
    	android:background="#E69B9B"
   	 tools:context=".MainActivity">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:background="#8ED3F3"
        android:fontFamily="cursive"
        android:text="Hello World!"
        android:textSize="34sp"
        android:textStyle="bold"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>

2. MainActivity.java:

package com.example.myapplication;

import android.os.Bundle;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_main);
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });
    }
}



